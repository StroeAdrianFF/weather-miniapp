{"version":3,"sources":["ImageGen.js","DataHolder.js","App.js","serviceWorker.js","index.js"],"names":["ImageGen","className","src","alt","DataHolder","useState","countryInput","setCountryInput","cityInput","setCityInput","resName","setResName","countryName","setCountryName","resHumidity","setResHumidity","resTemp","setResTemp","condition","setCondition","API","a","fetch","weather","json","weatherData","name","sys","country","main","humidity","temp","description","alert","type","placeholder","onChange","event","target","value","toLowerCase","Button","variant","onClick","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAeeA,MAZf,WAEI,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKC,IAAI,sHAAsHC,IAAI,mB,uCC6DpIC,G,MA/DI,WAAO,IAAD,EAEmBC,mBAAS,IAF5B,mBAEdC,EAFc,KAEAC,EAFA,OAGaF,mBAAS,IAHtB,mBAGdG,EAHc,KAGHC,EAHG,OAISJ,qBAJT,mBAIdK,EAJc,KAILC,EAJK,OAKiBN,qBALjB,mBAKdO,EALc,KAKDC,EALC,OAMiBR,qBANjB,mBAMdS,EANc,KAMDC,EANC,OAOSV,mBAAS,UAPlB,mBAOdW,EAPc,KAOLC,EAPK,OAQaZ,mBAAS,mBARtB,mBAQda,EARc,KAQHC,EARG,KAUfC,EAAM,mCAVS,4CAarB,wCAAAC,EAAA,+EAE8BC,MAAM,qDAAD,OAAsDd,EAAtD,YAAmEF,EAAnE,kBAAyFc,IAF5H,cAEcG,EAFd,gBAGkCA,EAAQC,OAH1C,OAGcC,EAHd,OAIcf,EAAUe,EAAYC,KAC5Bf,EAAWD,GACLE,EAAca,EAAYE,IAAIC,QACpCf,EAAeD,GACTE,EAAcW,EAAYI,KAAKC,SACrCf,EAAeD,GACTE,EAAUS,EAAYI,KAAKE,KACjCd,EAAWD,GACLE,EAAYO,EAAYF,QAAQ,GAAGS,YACzCb,EAAaD,GAbrB,kDAgBQe,MAAM,0CAhBd,2DAbqB,sBA4CrB,OACI,yBAAKhC,UAAU,cACX,yBAAKA,UAAU,gBACX,2BAAOiC,KAAK,OAAOC,YAAY,YAAYC,SARlC,SAACC,GAClB5B,EAAa4B,EAAMC,OAAOC,UAQlB,2BAAOL,KAAK,OAAOC,YAAY,eAAeC,SAdlC,SAACC,GACrB9B,EAAgB8B,EAAMC,OAAOC,MAAMC,kBAc3B,kBAACC,EAAA,EAAD,CAAQxC,UAAU,SAASyC,QAAQ,YAAYC,QAjDtC,4CAiDT,eACA,4BACI,yCAAejC,EAAf,IAAyBE,EAAzB,KACA,yCAAeE,EAAf,MACA,6CAAmBE,EAAU,QAAQ4B,QAAQ,GAA7C,UACA,2CAAiB1B,QCvCtB2B,MAff,WAGE,OACE,yBAAK5C,UAAU,OAEb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFY6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d2e25d20.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ImageGen.css';\r\n\r\nfunction ImageGen() {\r\n\r\n    return (\r\n        <div className=\"imgGen__main\">\r\n            <div className=\"imgGen__img\">\r\n                <img src=\"https://c4.wallpaperflare.com/wallpaper/410/867/750/vector-forest-sunset-forest-sunset-forest-wallpaper-preview.jpg\" alt=\"locationImg\" />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGen;\r\n","import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport './DataHolder.css';\r\n\r\n\r\n\r\nconst DataHolder = () => {\r\n\r\n    const [countryInput, setCountryInput] = useState('');\r\n    const [cityInput, setCityInput] = useState('');\r\n    const [resName, setResName] = useState();\r\n    const [countryName, setCountryName] = useState();\r\n    const [resHumidity, setResHumidity] = useState();\r\n    const [resTemp, setResTemp] = useState('273.15');\r\n    const [condition, setCondition] = useState('Not yet defined');\r\n\r\n    const API = '1a0b6d3c3784f9a8018552c1637ed6d7'\r\n\r\n\r\n    async function fetcher() {\r\n        try {\r\n            const weather = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${cityInput},${countryInput}&appid=${API}`);\r\n            const weatherData = await weather.json();\r\n            const resName = weatherData.name;\r\n            setResName(resName)\r\n            const countryName = weatherData.sys.country\r\n            setCountryName(countryName)\r\n            const resHumidity = weatherData.main.humidity;\r\n            setResHumidity(resHumidity)\r\n            const resTemp = weatherData.main.temp;\r\n            setResTemp(resTemp)\r\n            const condition = weatherData.weather[0].description;\r\n            setCondition(condition)\r\n        }\r\n        catch (error) {\r\n            alert('Please enter a valid country/city name')\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeCountry = (event) => {\r\n        setCountryInput(event.target.value.toLowerCase())\r\n\r\n    }\r\n\r\n    const onChangeCity = (event) => {\r\n        setCityInput(event.target.value)\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"data__main\">\r\n            <div className=\"data__inputs\">\r\n                <input type=\"text\" placeholder=\"City name\" onChange={onChangeCity} />\r\n                <input type=\"text\" placeholder=\"Country name\" onChange={onChangeCountry} />\r\n                <Button className=\"button\" variant=\"contained\" onClick={fetcher} >Retrieve me</Button>\r\n                <ul>\r\n                    <li>Location: {resName} {countryName} </li>\r\n                    <li>Humidity: {resHumidity} %</li>\r\n                    <li>Temperature: {(resTemp - 273.15).toFixed(2)} Â°C</li>\r\n                    <li>Conditions: {condition}</li>\r\n                </ul>\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n\r\n}\r\n\r\nexport default DataHolder;\r\n","import React from 'react';\nimport './App.css';\nimport ImageGen from './ImageGen'\nimport DataHolder from './DataHolder'\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"app\">\n\n      <div className=\"app__container\">\n        <ImageGen />\n        <DataHolder />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}